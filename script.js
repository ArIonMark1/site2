/*
Раз мы умеем удобно хранить состояние, то можем реализовать текстовый квест, где будем общаться с игроком посредством текста. 
Этот жанр требует мало ресурсов, поэтому развивается с момента появления компьютерных игр — с 1975 года.

Реализуем игру в консоли. Алгоритм будет таким:
Браузер приглашает пользователя к игре.
Выводится текущее состояние.
Выводится предложение о ходе.
Пользователь вводит действие. 
В зависимости от действия генерируется следующий шаг. 

 */

 /*

Практическое задание
Написать функцию, преобразующую число в объект. Передавая на вход число от 0 до 999, надо получить на выходе объект, в котором в соответствующих свойствах описаны единицы, десятки и сотни. Например, для числа 245 надо получить следующий объект: {‘единицы’: 5, ‘десятки’: 4, ‘сотни’: 2}. Если число превышает 999, необходимо выдать соответствующее сообщение с помощью console.log и вернуть пустой объект.
Продолжить работу с интернет-магазином:
В прошлом домашнем задании вы реализовали корзину на базе массивов. Какими объектами можно заменить их элементы?
Реализуйте такие объекты.
Перенести функционал подсчета корзины на объектно-ориентированную базу.
* Подумать над глобальными сущностями. К примеру, сущность «Продукт» в интернет-магазине актуальна не только для корзины, но и для каталога. Стремиться нужно к тому, чтобы объект «Продукт» имел единую структуру для различных модулей сайта, но в разных местах давал возможность вызывать разные методы.

  */

/* анимация  выбора категории товаров и отображение конкретных товаров*/
$(function() {
  $('.toggles button').click(function() {
    var get_id = this.id;
    var get_current = $('.posts .' + get_id);

    $('.post').not(get_current).hide(500);
    get_current.show(500);
  });

  $('#showall').click(function() {
    $('.post').show(500);
  });
});

$(document).ready(function(){
  $(".owl-carousel").owlCarousel({
    items: 8
  });
});

if($(window).width() < 780) {
  $(".owl-carousel").owlCarousel({
    items: 3
  });
}